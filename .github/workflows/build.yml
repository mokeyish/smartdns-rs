# .github/workflows/build.yml
name: Build

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: false
      features:
        type: string
        required: false
        default: default
        description: Space or comma separated list of features to activate
      prerelease:
        type: boolean
        description: "Identify the release as a prerelease. Defaults to false"
        required: false

  workflow_dispatch:
    inputs:
      features:
        type: string
        required: false
        default: default
        description: Space or comma separated list of features to activate


jobs:
  build:
    name: build ${{ matrix.target }} ${{ inputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          # - target: x86_64-pc-windows-gnu
          #   os: windows-latest
          #   archive: zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: i686-pc-windows-msvc
            os: windows-latest
            archive: zip
          # - target: i686-pc-windows-gnu  # error: linker `i686-w64-mingw32-gcc` not found
          #   os: windows-latest
          #   archive: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: zip
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: zip
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          # - target: arch64-unknown-linux-musl
          #   archive: tar.gz tar.xz tar.zst
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          - target: arm-unknown-linux-musleabi
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          - target: arm-unknown-linux-musleabihf
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          # - target: mips-unknown-linux-musl
          #   archive: tar.gz tar.xz tar.zst
          # - target: mips-unknown-linux-musl
          #   archive: tar.gz tar.xz tar.zst
          # - target: mips64-unknown-linux-muslabi64
          #   archive: tar.gz tar.xz tar.zst
          - target: aarch64-linux-android
            os: ubuntu-latest
            archive: tar.gz tar.xz tar.zst
          # - target: x86_64-unknown-freebsd
          #   os: ubuntu-latest
          #   archive: tar.gz tar.xz tar.zst
          # - target: x86_64-unknown-netbsd
          #   os: ubuntu-latest
          #   archive: tar.gz tar.xz tar.zst
          # - target: wasm32-unknown-emscripten
          #   archive: tar.gz tar.xz tar.zst

    runs-on: ${{matrix.os}}
    env:
      DIST_DIR: smartdns-${{ matrix.target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build
        run: just build --release --no-default-features --features ${{ inputs.features }} --target=${{ matrix.target }}
        env:
          USE_CROSS: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Package
        run: just target=${{ matrix.target }} pack
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: smartdns-${{ matrix.target }}-${{ inputs.version || github.ref_name }}
          retention-days: 30
          path: |
            dist/*.zip
            dist/*.tar.gz
            dist/*.msi
            dist/*.exe
            dist/*sha256sum.txt

      - name: Publish release
        uses: softprops/action-gh-release@v2.3.2
        if: ${{ startsWith(inputs.version, 'v') }}
        with:
          draft: false
          prerelease: ${{ inputs.prerelease }}
          tag_name: ${{ inputs.version }}
          files: |
            dist/*.zip
            dist/*.tar.gz
            dist/*.msi
            dist/*.exe
            dist/*sha256sum.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
      - name: Rename artifacts
        run: |
          mv smartdns-x86_64-unknown-linux-musl-*/smartdns-x86_64-unknown-linux-musl-*.tar.gz smartdns-x86_64-unknown-linux-musl.tar.gz
          mv smartdns-arm-unknown-linux-musleabihf-*/smartdns-arm-unknown-linux-musleabihf-*.tar.gz smartdns-arm-unknown-linux-musleabihf.tar.gz
          mv smartdns-aarch64-unknown-linux-musl-*/smartdns-aarch64-unknown-linux-musl-*.tar.gz smartdns-aarch64-unknown-linux-musl.tar.gz
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64 --platform linux/arm64 --platform linux/arm/v7 --build-arg VERSION=${{ inputs.version }} -t ghcr.io/mokeyish/smartdns-rs:${{ inputs.version || github.ref_name }} --push -f ./contrib/docker/Dockerfile .
